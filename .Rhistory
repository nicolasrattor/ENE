if(!file.exists(destino)){
download.file("https://www.ine.cl/docs/default-source/ocupacion-y-desocupacion/bbdd/2020/spss/ene-2020-07-jja.sav?sfvrsn=41536cf3_13&download=true",destfile = destino, mode = "wb")
}
destino <- "input/data_sav/ene_2020_08.sav"
if(!file.exists(destino)){
download.file("https://www.ine.cl/docs/default-source/ocupacion-y-desocupacion/bbdd/2020/spss/ene-2020-08-jas.sav?sfvrsn=8adde4b3_14&download=true",destfile = destino, mode = "wb")
}
#-------------------------------------------------------------------------------#
# Paso 9. Corrección de bases con problemas en .csv - Deben descargarse en .sav (nombre columnas corridos)
#-------------------------------------------------------------------------------#
# 2019-08 a 2019-11
destino <- "input/data_sav/ene_2019_08.sav"
if(!file.exists(destino)){
download.file("https://www.ine.cl/docs/default-source/ocupacion-y-desocupacion/bbdd/2019/formato-spss/ene-2019-08.sav?sfvrsn=8179276e_8&download=true" , destfile = destino, mode = "wb")
}
destino <- "input/data_sav/ene_2019_09.sav"
if(!file.exists(destino)){
download.file("https://www.ine.cl/docs/default-source/ocupacion-y-desocupacion/bbdd/2019/formato-spss/ene-2019-09.sav?sfvrsn=70bb73ec_8&download=true",destfile = destino, mode = "wb")
}
destino <- "input/data_sav/ene_2019_10.sav"
if(!file.exists(destino)){
download.file("https://www.ine.cl/docs/default-source/ocupacion-y-desocupacion/bbdd/2019/formato-spss/ene-2019-09.sav?sfvrsn=70bb73ec_8&download=true",destfile = destino, mode = "wb")
}
destino <- "input/data_sav/ene_2019_11.sav"
if(!file.exists(destino)){
download.file("https://www.ine.cl/docs/default-source/ocupacion-y-desocupacion/bbdd/2019/formato-spss/ene-2019-11.sav?sfvrsn=38b27080_10&download=true",destfile = destino, mode = "wb")
}
for (y in 2017:2019){
for (i in c("01","02","03","04","05","06","07","08","09","10","11","12")){
url <- append(url,(paste(link,y,"/formato-spss/ene-",y,"-",i,".sav", sep="")))
mes <- append(mes,i)
ano <- append(ano,y)
}}
valid_url <- function(url_in,t=2){
con <- url(url_in)
check <- suppressWarnings(try(open.connection(con,open="rt",timeout=t),silent=T)[1])
suppressWarnings(try(close.connection(con),silent=T))
ifelse(is.null(check), T, F)
}
true <- cbind(cbind(cbind(as.data.table(sapply(url,valid_url)),url),ano),mes)
names(true)[1] <- "valid"
# Identificación de trimestre
true$trim <- c("")
true$trim[true$mes=="01"] <- "def"
true$trim[true$mes=="02"] <- "efm"
true$trim[true$mes=="03"] <- "fma"
true$trim[true$mes=="04"] <- "mam"
true$trim[true$mes=="05"] <- "amj"
true$trim[true$mes=="06"] <- "mjj"
true$trim[true$mes=="07"] <- "jja"
true$trim[true$mes=="08"] <- "jas"
true$trim[true$mes=="09"] <- "aso"
true$trim[true$mes=="10"] <- "son"
true$trim[true$mes=="11"] <- "ond"
true$trim[true$mes=="12"] <- "nde"
# URL FALSE/TRUE
false <- true[(true$valid=="FALSE"),]
true <- true[!(true$valid=="FALSE"),]
# Reemplazar URL=FALSE
false$url <- as.character(false$url)
false$mes <- as.character(false$mes)
for (k in 1:length(false$trim)){
false$url[k] <- (paste(link,false$ano[k],"/formato-spss/","ene-",false$ano[k],"-",false$mes[k],"-",false$trim[k],".sav", sep=""))
}
false$url[false$ano==2020] <- gsub("formato-spss", "spss", false$url[false$ano==2020])
spss <- rbind(true,false)
spss$trim <- NULL
spss$valid <- NULL
spss <- cbind(as.data.table(sapply(spss$url,valid_url)),spss)
names(spss)[1] <- "valid"
spss <- spss[(spss$valid=="TRUE"),]
spss <- spss[order(spss$ano, spss$mes),]
destino <- c(paste("input/data_sav/ene_",spss$ano,"_",spss$mes,".sav", sep = ""))
# La siguiente función descarga sólo bases que no estén previamente guardadas.
for (i in seq_along(spss$url)){
if(!file.exists(destino[i])){
download.file(url = spss$url[i], destfile = destino[i], mode = "wb")
}
next
}
link <- "http://www.ine.cl/docs/default-source/ocupacion-y-desocupacion/bbdd/"
actual <- year(now())
url <- c()
mes <- c()
ano <- c()
gc()
link <- "http://www.ine.cl/docs/default-source/ocupacion-y-desocupacion/bbdd/"
actual <- year(now())
url <- c()
mes <- c()
ano <- c()
for (y in 2017:2019){
for (i in c("01","02","03","04","05","06","07","08","09","10","11","12")){
url <- append(url,(paste(link,y,"/formato-spss/ene-",y,"-",i,".sav", sep="")))
mes <- append(mes,i)
ano <- append(ano,y)
}}
actual <- year(now())
valid_url <- function(url_in,t=2){
con <- url(url_in)
check <- suppressWarnings(try(open.connection(con,open="rt",timeout=t),silent=T)[1])
suppressWarnings(try(close.connection(con),silent=T))
ifelse(is.null(check), T, F)
}
true <- cbind(cbind(cbind(as.data.table(sapply(url,valid_url)),url),ano),mes)
names(true)[1] <- "valid"
# Identificación de trimestre
true$trim <- c("")
true$trim[true$mes=="01"] <- "def"
true$trim[true$mes=="02"] <- "efm"
true$trim[true$mes=="03"] <- "fma"
true$trim[true$mes=="04"] <- "mam"
true$trim[true$mes=="05"] <- "amj"
true$trim[true$mes=="06"] <- "mjj"
true$trim[true$mes=="07"] <- "jja"
true$trim[true$mes=="08"] <- "jas"
true$trim[true$mes=="09"] <- "aso"
true$trim[true$mes=="10"] <- "son"
true$trim[true$mes=="11"] <- "ond"
true$trim[true$mes=="12"] <- "nde"
# URL FALSE/TRUE
false <- true[(true$valid=="FALSE"),]
true <- true[!(true$valid=="FALSE"),]
# Reemplazar URL=FALSE
false$url <- as.character(false$url)
false$mes <- as.character(false$mes)
for (k in 1:length(false$trim)){
false$url[k] <- (paste(link,false$ano[k],"/formato-spss/","ene-",false$ano[k],"-",false$mes[k],"-",false$trim[k],".sav", sep=""))
}
false$url[false$ano==2020] <- gsub("formato-spss", "spss", false$url[false$ano==2020])
spss <- rbind(true,false)
spss$trim <- NULL
spss$valid <- NULL
spss <- cbind(as.data.table(sapply(spss$url,valid_url)),spss)
names(spss)[1] <- "valid"
spss <- spss[(spss$valid=="TRUE"),]
spss <- spss[order(spss$ano, spss$mes),]
destino <- c(paste("input/data_sav/ene_",spss$ano,"_",spss$mes,".sav", sep = ""))
# La siguiente función descarga sólo bases que no estén previamente guardadas.
for (i in seq_along(spss$url)){
if(!file.exists(destino[i])){
download.file(url = spss$url[i], destfile = destino[i], mode = "wb")
}
next
}
data_csv_long <- list.files("input/data_csv",full.names = TRUE)
data_csv_short <- stringr::str_remove_all(list.files("input/data_csv"),".csv")
# Segunda parte csv
for(i in 72:90){
assign(data_csv_short[i],
readr::read_csv(data_csv_long[i]))
}
# Segunda parte spss continuacion
data_sav_long <- list.files("input/data_sav",full.names = TRUE)
data_sav_short <- stringr::str_remove_all(list.files("input/data_sav"),".sav")
for(i in 1:length(data_sav_long)){
assign(
data_sav_short[i],
haven::read_sav(data_sav_long[i])
)
}
for(i in 120){
assign(data_csv_short[i],
readr::read_csv2(data_csv_long[i]))
}
sum(ene_2017_08$fact_cal)
save(list=ls(pattern = "ene_"), file="input/data_Rdata/bases_ENE_2.Rdata")
rm(list=ls(pattern = "ene_"))
gc()
get(load('input/data_Rdata/bases_ENE_3.Rdata'))
dfs <- Filter(function(x) is(x, "data.frame"), mget(ls(pattern="ene")))
base<-ls(pattern="ene") %>% as.data.frame()
names(base)<-"periodo"
library(tidyverse)
library(lubridate)
library(ggrepel)
library(scales)
base<-ls(pattern="ene") %>% as.data.frame()
names(base)<-"periodo"
base<-base %>% filter(periodo!="dfs")
base<-base %>% mutate(N=NA)
View(base)
for (i in 1:nrow(base)){
base[i,2]<-dfs[[i]] %>%
as.data.frame() %>%
select(fact_cal) %>%
mutate(fact_cal=as.numeric(stringr::str_replace_all(fact_cal,",","."))) %>%
sum()
}
base
gc()
## Cargar bases
get(load('input/data_Rdata/bases_ENE_1.Rdata'))
get(load('input/data_Rdata/bases_ENE_2.Rdata'))
dfs <- Filter(function(x) is(x, "data.frame"), mget(ls(pattern="ene")))
base<-ls(pattern="ene") %>% as.data.frame()
names(base)<-"periodo"
base<-base %>% filter(periodo!="dfs")
base<-base %>% mutate(N=NA)
for (i in 1:nrow(base)){
base[i,2]<-dfs[[i]] %>%
as.data.frame() %>%
select(fact_cal) %>%
mutate(fact_cal=as.numeric(stringr::str_replace_all(fact_cal,",","."))) %>%
sum()
}
base
gc()
library(tidyverse)
library(lubridate)
library(ggrepel)
library(scales)
base<-ls(pattern="ene") %>% as.data.frame()
names(base)<-"periodo"
base<-base %>% filter(periodo!="dfs")
base<-base %>% mutate(tcp_mujeres=NA)
for (i in 1:nrow(base)){
base[i,2]<-dfs[[i]] %>%
as.data.frame() %>%
filter(b5==3 & (b6==1|b6==2)) %>%
filter(sexo==2) %>%
select(fact_cal) %>%
mutate(fact_cal=as.numeric(stringr::str_replace_all(fact_cal,",","."))) %>%
sum()
}
## Dar año y mes
base<-base %>% mutate(ano_trimestre=NA,mes_central=NA)
for (i in 1:nrow(base)){
base[i,3]<-dfs[[i]] %>% as.data.frame() %>%
mutate(fact_cal=as.numeric(stringr::str_replace_all(fact_cal,",","."))) %>%
select(ano_trimestre) %>% slice(1)
base[i,4]<-dfs[[i]] %>% as.data.frame() %>%
mutate(fact_cal=as.numeric(stringr::str_replace_all(fact_cal,",","."))) %>%
select(mes_central) %>% slice(1)
}
base<-base %>% mutate(trimestre=make_date(year=ano_trimestre,month = mes_central))
base
## Gráfico
base %>% ggplot(aes(x=trimestre,y=tcp_mujeres))+geom_line()+geom_point()
## Informales
base<-base %>% mutate(informales_tcp_mujeres=NA)
## Informales desde JAS 2017 hasta SON 2020 (antes no hay variable ocup_form)
for (i in 91:nrow(base)){
base[i,6]<- dfs[[i]] %>% filter(b5==3 & (b6==1|b6==2)) %>% filter(sexo==2) %>%
filter(ocup_form==2) %>% select(fact_cal) %>%
mutate(fact_cal=as.numeric(stringr::str_replace_all(fact_cal,",","."))) %>%
sum()
}
## Informales desde 2010 hasta 2017 (antes no hay variable ocup_form)
for (i in 1:90){
base[i,6]<- dfs[[i]] %>%
filter(b5==3 & (b6==1|b6==2) & sexo==2) %>%
filter(
(b7_3==2 | b7_4==2) |
(b8>=2 &  (b7_3==1 & (b7_4==88 | b7_4==99)) ) |
(b8>=2 &  (b7_4==1 & (b7_3==88 | b7_3==99)) ) |
(b8>=2 &  ( (b7_4==88|b7_4==99) & (b7_3==88 | b7_3==99)) )  |
(b8==1 &  (b7_3==1 & (b7_4==88 | b7_4==99)) ) & (b11==4|b11>5) |
(b8==1 &  (b7_4==1 & (b7_3==88 | b7_3==99)) ) & (b11==4|b11>5) |
(b8==1 &  ( (b7_4==88|b7_4==99) & (b7_3==88 | b7_3==99)) ) & (b11==4|b11>5)
) %>%
select(fact_cal) %>% sum()
}
base<-base %>% mutate(porcentaje_informales=round(informales_tcp_mujeres/tcp_mujeres,3))
## Exportar base
writexl::write_xlsx(base,"output/graficos/tcp/tcp_mujeres_informalidad.xlsx",
col_names = TRUE,format_headers = TRUE)
## Gráfico
base %>% ggplot(aes(x=trimestre,y=porcentaje_informales))+geom_line()+geom_point()+theme_bw()+
labs(#title="Porcentaje de trabajadoras de servicio doméstico informales en Chile",
#subtitle="Sobre el total de trabajadoras de servicio doméstico ocupadas en cada trimestre",
x="Trimestres móviles",
y = "Porcentaje",
caption = "Línea roja indica entrada en vigencia de Ley 20.786.
Línea azul indica cambio de metodología. Desde ese punto cifras oficiales.
Línea morada indica inicio del COVID-19 en Chile.") +
geom_text(aes(label = ifelse(mes_central %in% c(7),
format(paste0(round(porcentaje_informales,3)*100,"%"),
scientific = FALSE),"")),
position = position_dodge(0.9),
vjust=-0.4, colour = "black", size=4.0) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
scale_x_date(labels = date_format("%Y-%m"),breaks='2 years') +
geom_vline(xintercept=as.numeric(base$trimestre[62]), linetype="dashed", color = "red", size=1) +
geom_vline(xintercept=as.numeric(base$trimestre[91]), linetype="dashed", color = "blue", size=1) +
geom_vline(xintercept=as.numeric(base$trimestre[122]), linetype="dashed", color = "purple", size=1)
ggsave(plot = last_plot(),
filename = "output/graficos/tcp/Gráfico_informales_porcentaje.png",
device = "png",
dpi = "retina",
units = "cm",
width = 30,
height = 25)
base %>% ggplot(aes(x=trimestre,y=porcentaje_informales))+geom_line()+geom_point()+theme_bw()+
labs(#title="Porcentaje de trabajadoras de servicio doméstico informales en Chile",
#subtitle="Sobre el total de trabajadoras de servicio doméstico ocupadas en cada trimestre",
x="Trimestres móviles",
y = "Porcentaje",
caption = "Marzo de 2015 entrada en vigencia de Ley 20.786.
Agosto de 2017 cambio de metodología. Desde ese punto cifras oficiales.
Marzo de 2020 inicio del COVID-19 en Chile.") +
geom_text(aes(label = ifelse(mes_central %in% c(7),
format(paste0(round(porcentaje_informales,3)*100,"%"),
scientific = FALSE),"")),
position = position_dodge(0.9),
vjust=-0.4, colour = "black", size=4.0) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
scale_x_date(labels = date_format("%Y-%m"),breaks='2 years') +
geom_vline(xintercept=as.numeric(base$trimestre[62]), linetype="dashed", color = "#bbbbbb", size=1) +
geom_vline(xintercept=as.numeric(base$trimestre[91]), linetype="dashed", color = "#bbbbbb", size=1) +
geom_vline(xintercept=as.numeric(base$trimestre[122]), linetype="dashed", color = "#bbbbbb", size=1)
ggsave(plot = last_plot(),
filename = "output/graficos/tcp/Gráfico_informales_porcentaje_bn.png",
device = "png",
dpi = "retina",
units = "cm",
width = 30,
height = 25)
writexl::write_xlsx(base,"output/graficos/tcp/datos_grafico_informales.xlsx")
gc()
library(tidyverse)
library(scales)
gc()
#### Cargar bases
#get(load('input/data_Rdata/bases_ENE_1.Rdata'))
get(load('input/data_Rdata/bases_ENE_2.Rdata'))
get(load('input/data_Rdata/bases_ENE_3.Rdata'))
## Crear lista con las bases
dfs <- Filter(function(x) is(x, "data.frame"), mget(ls(pattern = "ene_")))
## Crear tabla vacía
base<-ls(pattern = "ene_") %>% as.data.frame()
rm(list=ls(pattern = "ene_"))
names(base)<-"periodo"
base<-base %>% filter(periodo!="dfs")
base<-base %>% mutate(ocupados_agro=NA)
i<-1
for (i in 1:nrow(base)){
base[i,2]<-dfs[[i]] %>%
as.data.frame() %>%
mutate(fact_cal=as.numeric(stringr::str_replace_all(fact_cal,",","."))) %>%
filter(categoria_ocupacion>0) %>%
filter(b14_rev4cl_caenes==1) %>%
#   filter(ocup_form==1) %>%                      ## filtro formales, optativo
select(fact_cal) %>%
sum()
}
# writexl::write_xlsx(base,"ocupados agricultura ENE formales.xlsx")
base %>%
mutate(fecha=stringr::str_remove_all(periodo,"ene_"),
fecha=lubridate::make_date(year=substr(fecha,1,4),
month = substr(fecha,6,7) ,day="01")) %>%
ggplot(aes(x=fecha,y=ocupados_agro))+
geom_line()+
theme_bw()+
labs(title = "Ocupados en Agricultura.") +
scale_x_date(labels = date_format("%Y-%b"),breaks='1 year' ) +
scale_y_continuous(labels=function(x) format(x, big.mark = ".", scientific = FALSE),
limits = c(400000,900000)) +
theme(legend.position = "bottom")
ggsave(
plot = last_plot(),
filename = "output/graficos/agro/ocupados_agricultura2.png",
device = "png",
dpi = "retina",
units = "cm",
width = 20,
height = 15
)
gc()
# carga paquetes
library(tidyverse)
library(lubridate)
library(survey)
library(srvyr)
# Cargar bases
get(load('input/data_Rdata/bases_ENE_1.Rdata'))
get(load('input/data_Rdata/bases_ENE_2.Rdata'))
get(load('input/data_Rdata/bases_ENE_3.Rdata'))
gc()
options(survey.lonely.psu = "certainty" )
## Horas automático ####
dfs <- Filter(function(x) is(x, "data.frame"), mget(ls(pattern = "ene")))
base<-ls(pattern = "ene") %>% as.data.frame()
names(base)<-"periodo"
base<-base %>% mutate(horas=NA,
horas_low=NA,
horas_upp=NA)
i<-1
for (i in 1:nrow(base)){
# renombrar variable conglomerado si es que no existe
if(sum(dfs[[i]]$id_directorio)>0){
dfs[[i]]$conglomerado <- dfs[[i]]$id_directorio
}
# renombrar variable conglomerado si es que no existe
if(sum(dfs[[i]]$estrato_unico)>0){
dfs[[i]]$estrato <- dfs[[i]]$estrato_unico
}
# diseño muestral
ds <- dfs[[i]] %>%
mutate(fact_cal=as.numeric(stringr::str_replace_all(fact_cal,",","."))) %>%
as.data.frame() %>% as_survey_design(ids = conglomerado,
strata = estrato,
weights = fact_cal)
# horas
horas <- ds %>% filter(activ==1&categoria_ocupacion==3) %>%
summarise(c2_1_3= survey_total(c2_1_3,na.rm = TRUE,vartype=c("ci")))
# nt
nt    <- ds %>% filter(activ==1&categoria_ocupacion==3) %>%
summarise(nt= survey_total(na.rm = TRUE,vartype=c("ci")))
# horas / nt
base[i,2:4]<-horas/nt
}
# Dar año y mes
base<-base %>% mutate(ano_trimestre=NA,mes_central=NA)
for (i in 1:nrow(base)){
base[i,5]<-dfs[[i]] %>% as.data.frame() %>% select(ano_trimestre) %>% slice(1)
base[i,6]<-dfs[[i]] %>% as.data.frame() %>% select(mes_central) %>% slice(1)
}
base<-base %>% mutate(trimestre=make_date(year=ano_trimestre,month = mes_central))
# grafico
base %>%
ggplot(aes(trimestre,horas)) +
geom_line() +
#  geom_errorbar(aes(ymin=horas_low, ymax=horas_upp), width=.01,
#                color="red") +
theme_bw() +
labs(title = "Horas de trabajo semanales promedio 2010-2021",
subtitle = "Trabajadores/as asalariados/as sector privado",
caption = "Encuesta Nacional de Empleo (ENE)")
# Guardar gráfico
ggsave(
plot = last_plot(),
filename = "output/graficos/horas/horas_trabajo_priv.png",
device = "png",
dpi = "retina",
units = "cm",
width = 15,
height = 10
)
library(tidyverse)
library(survey)
library(srvyr)
## Cargar bases
get(load('Output/bases_ENE_2016_2020.Rdata'))
get(load('Output/bases_ENE_2021.Rdata'))
get(load('input/data_Rdata/bases_ENE_3.Rdata'))
## Cargar bases
get(load('input/data_Rdata/bases_ENE_2.Rdata'))
## Crear tabla vacía
base<-ls(pattern="ene") %>% as.data.frame()
names(base)<-"periodo"
base<-base %>% mutate(nt_contrato_asalariados=NA,
nt_contrato_asalariados_mas_5=NA)
remove(list=ls(pattern="ene"))
gc()
i<-1
## Todas las empresas
for (i in 1:nrow(base)){
base[i,2]<-dfs[[i]] %>%
as.data.frame() %>%
filter(categoria_ocupacion==3 | categoria_ocupacion==4) %>%   ## Asalariados publicos y privados
filter(!b14_rev4cl_caenes %in% c(1,19,20,21)) %>%
filter(b8==1) %>%                       ## filtro contrato
select(fact_cal) %>%
sum()
}
## Empresas de 5 o más trab
for (i in 1:nrow(base)){
base[i,3]<-dfs[[i]] %>%
as.data.frame() %>%
filter(categoria_ocupacion==3 | categoria_ocupacion==4) %>%   ## Asalariados publicos y privados
filter(!b14_rev4cl_caenes %in% c(1,19,20,21)) %>%
filter(b8==1) %>%                       ## filtro contrato
filter(b15_1!=1) %>%                    ## Quitar empresas con menos de 5 trabajadores
select(fact_cal) %>%
sum()
}
library(tidyverse)
library(survey)
library(srvyr)
## Cargar bases
get(load('input/data_Rdata/bases_ENE_2.Rdata'))
get(load('input/data_Rdata/bases_ENE_3.Rdata'))
dfs <- Filter(function(x) is(x, "data.frame"), mget(ls(pattern="ene")))
remove(list=ls(pattern="ene"))
## Crear tabla vacía
base<-ls(pattern="ene") %>% as.data.frame()
names(base)<-"periodo"
base<-base %>% mutate(nt_contrato_asalariados=NA,
nt_contrato_asalariados_mas_5=NA)
gc()
## Todas las empresas
for (i in 1:nrow(base)){
base[i,2]<-dfs[[i]] %>%
as.data.frame() %>%
filter(categoria_ocupacion==3 | categoria_ocupacion==4) %>%   ## Asalariados publicos y privados
filter(!b14_rev4cl_caenes %in% c(1,19,20,21)) %>%
filter(b8==1) %>%                       ## filtro contrato
select(fact_cal) %>%
sum()
}
## Empresas de 5 o más trab
for (i in 1:nrow(base)){
base[i,3]<-dfs[[i]] %>%
as.data.frame() %>%
filter(categoria_ocupacion==3 | categoria_ocupacion==4) %>%   ## Asalariados publicos y privados
filter(!b14_rev4cl_caenes %in% c(1,19,20,21)) %>%
filter(b8==1) %>%                       ## filtro contrato
filter(b15_1!=1) %>%                    ## Quitar empresas con menos de 5 trabajadores
select(fact_cal) %>%
sum()
}
