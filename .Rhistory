# 27/12/2021
# Limpiar entorno de trabajo
rm(list = ls())
# Paquetes utilizados
library(data.table)
library(lubridate)
#-------------------------------------------------------------------------------#
# Paso 1. Creación de carpetas
#-------------------------------------------------------------------------------#
ifelse(
dir.exists("input/data_csv"),
print("Directorio existe"),
dir.create("input/data_csv")
)
#-------------------------------------------------------------------------------#
# Paso 2. Creación de link
#-------------------------------------------------------------------------------#
link <- "http://www.ine.cl/docs/default-source/ocupacion-y-desocupacion/bbdd/"
actual <- year(now())
url <- c()
mes <- c()
ano <- c()
for (y in 2010:actual){
for (i in c("01","02","03","04","05","06","07","08","09","10","11","12")){
url <- append(url,(paste(link,y,"/formato-csv/ene-",y,"-",i,".csv", sep="")))
mes <- append(mes,i)
ano <- append(ano,y)
}}
#-------------------------------------------------------------------------------#
# Paso 3. Chequear existencia de URL (1/2)
#-------------------------------------------------------------------------------#
# Fuente: https://stackoverflow.com/questions/52911812/check-if-url-exists-in-r
valid_url <- function(url_in,t=2){
con <- url(url_in)
check <- suppressWarnings(try(open.connection(con,open="rt",timeout=t),silent=T)[1])
suppressWarnings(try(close.connection(con),silent=T))
ifelse(is.null(check), T, F)
}
true <- cbind(cbind(cbind(as.data.table(sapply(url,valid_url)),url),ano),mes)
names(true)[1] <- "valid"
#-------------------------------------------------------------------------------#
# Paso 4. Corrección de URL=FALSE
#-------------------------------------------------------------------------------#
# Identificación de trimestre
true$trim <- c("")
true$trim[true$mes=="01"] <- "def"
true$trim[true$mes=="02"] <- "efm"
true$trim[true$mes=="03"] <- "fma"
true$trim[true$mes=="04"] <- "mam"
true$trim[true$mes=="05"] <- "amj"
true$trim[true$mes=="06"] <- "mjj"
true$trim[true$mes=="07"] <- "jja"
true$trim[true$mes=="08"] <- "jas"
true$trim[true$mes=="09"] <- "aso"
true$trim[true$mes=="10"] <- "son"
true$trim[true$mes=="11"] <- "ond"
true$trim[true$mes=="12"] <- "nde"
# URL FALSE/TRUE
false <- true[(true$valid=="FALSE"),]
true <- true[!(true$valid=="FALSE"),]
# Reemplazar URL=FALSE
false$url <- as.character(false$url)
false$mes <- as.character(false$mes)
for (k in 1:length(false$trim)){
false$url[k] <- (paste(link,false$ano[k],"/formato-csv/","ene-",false$ano[k],"-",false$mes[k],"-",false$trim[k],".csv", sep=""))
}
csv <- rbind(true,false)
csv$valid <- NULL
csv$trim <- NULL
#-------------------------------------------------------------------------------#
# Paso 5. Corrección de URL irregular
#-------------------------------------------------------------------------------#
# Reemplazar URL irregular
csv$mes <- as.character(csv$mes)
csv$url <- as.character(csv$url)
link <- "http://www.ine.cl/docs/default-source/ocupacion-y-desocupacion/bbdd/2014/formato-csv/"
csv$url[csv$ano==2014 & csv$mes=="08"] <- paste(link,"ene-2014.csv", sep="")
#-------------------------------------------------------------------------------#
# Paso 6. Chequear existencia de URL tras corrección (2/2)
#-------------------------------------------------------------------------------#
csv <- cbind(as.data.table(sapply(csv$url,valid_url)),csv)
names(csv)[1] <- "valid"
rownames(csv) <- NULL
csv <- csv[(csv$valid=="TRUE"),]
csv <- csv[order(csv$ano, csv$mes),]
#-------------------------------------------------------------------------------#
# Paso 7. Descargar bases
#-------------------------------------------------------------------------------#
destino <- c(paste("input/data_csv/ene_",csv$ano,"_",csv$mes,".csv", sep = ""))
# La siguiente función descarga sólo bases que no estén previamente guardadas.
for (i in seq_along(csv$url)){
if(!file.exists(destino[i])){
download.file(url = csv$url[i], destfile =destino[i], mode = "wb")
}
next
}
#-------------------------------------------------------------------------------#
# Paso 8. Corrección de bases con problemas en .csv - Deben descargarse en .sav
#-------------------------------------------------------------------------------#
# 2020-02 a 2020-08
destino <- "input/data_sav/ene_2020_02.sav"
if(!file.exists(destino)){
download.file("https://www.ine.cl/docs/default-source/ocupacion-y-desocupacion/bbdd/2020/spss/ene-2020-02-efm.sav?sfvrsn=8adde4b3_14&download=true" , destfile = destino, mode = "wb")
}
destino <- "input/data_sav/ene_2020_03.sav"
if(!file.exists(destino)){
download.file("https://www.ine.cl/docs/default-source/ocupacion-y-desocupacion/bbdd/2020/spss/ene-2020-03-fma.sav?sfvrsn=4515aeb9_18&download=true",destfile = destino, mode = "wb")
}
destino <- "input/data_sav/ene_2020_04.sav"
if(!file.exists(destino)){
download.file("https://www.ine.cl/docs/default-source/ocupacion-y-desocupacion/bbdd/2020/spss/ene-2020-04-mam.sav?sfvrsn=e598f538_18&download=true",destfile = destino, mode = "wb")
}
destino <- "input/data_sav/ene_2020_05.sav"
if(!file.exists(destino)){
download.file("https://www.ine.cl/docs/default-source/ocupacion-y-desocupacion/bbdd/2020/spss/ene-2020-05-amj.sav?sfvrsn=1fff738f_12&download=true",destfile = destino, mode = "wb")
}
destino <- "input/data_sav/ene_2020_06.sav"
if(!file.exists(destino)){
download.file("https://www.ine.cl/docs/default-source/ocupacion-y-desocupacion/bbdd/2020/spss/ene-2020-06-mjj.sav?sfvrsn=86a38374_11&download=true",destfile = destino, mode = "wb")
}
destino <- "input/data_sav/ene_2020_07.sav"
if(!file.exists(destino)){
download.file("https://www.ine.cl/docs/default-source/ocupacion-y-desocupacion/bbdd/2020/spss/ene-2020-07-jja.sav?sfvrsn=41536cf3_13&download=true",destfile = destino, mode = "wb")
}
destino <- "input/data_sav/ene_2020_08.sav"
if(!file.exists(destino)){
download.file("https://www.ine.cl/docs/default-source/ocupacion-y-desocupacion/bbdd/2020/spss/ene-2020-08-jas.sav?sfvrsn=8adde4b3_14&download=true",destfile = destino, mode = "wb")
}
data_csv_long <- list.files("input/data_csv",full.names = TRUE)
data_csv_short <- stringr::str_remove_all(list.files("input/data_csv"),".csv")
data_csv_short
# Tercera parte
for(i in 128:length(data_csv_long)){
assign(
data_csv_short[i],
read.csv(data_csv_long[i],sep=";")
)
}
save(list=ls(pattern = "ene_"), file="input/data_Rdata/bases_ENE_3.Rdata")
rm(list=ls(pattern = "ene_"))
library(tidyverse)
gc()
get(load('Output/bases_ENE_3.Rdata'))
get(load('input/data_Rdata/bases_ENE_3.Rdata'))
dfs <- Filter(function(x) is(x, "data.frame"), mget(ls(pattern="ene")))
base<-ls() %>% as.data.frame()
names(base)<-"periodo"
base<-base %>% filter(periodo!="dfs")
base<-base %>% mutate(tcp_mujeres=NA)
for (i in 1:nrow(base)){
base[i,2]<-dfs[[i]] %>% as.data.frame() %>% filter(b5==3 & (b6==1|b6==2)) %>% filter(sexo==2) %>% select(fact_cal) %>% sum()
}
for (i in 1:nrow(base)){
base[i,2]<-dfs[[i]] %>%
as.data.frame() %>%
filter(b5==3 & (b6==1|b6==2)) %>%
filter(sexo==2) %>%
select(fact_cal) %>%
mutate(fact_cal=as.numeric(stringr::str_replace_all(fact_cal,",","."))) %>%
sum()
}
View(base)
dfs <- Filter(function(x) is(x, "data.frame"), mget(ls(pattern="ene")))
base<-ls(pattern="ene") %>% as.data.frame()
names(base)<-"periodo"
base<-base %>% filter(periodo!="dfs")
base<-base %>% mutate(tcp_mujeres=NA)
for (i in 1:nrow(base)){
base[i,2]<-dfs[[i]] %>%
as.data.frame() %>%
filter(b5==3 & (b6==1|b6==2)) %>%
filter(sexo==2) %>%
select(fact_cal) %>%
mutate(fact_cal=as.numeric(stringr::str_replace_all(fact_cal,",","."))) %>%
sum()
}
View(base)
## Dar año y mes
base<-base %>% mutate(ano_trimestre=NA,mes_central=NA)
for (i in 1:nrow(base)){
base[i,3]<-dfs[[i]] %>% as.data.frame() %>%
mutate(fact_cal=as.numeric(stringr::str_replace_all(fact_cal,",","."))) %>%
select(ano_trimestre) %>% slice(1)
base[i,4]<-dfs[[i]] %>% as.data.frame() %>%
mutate(fact_cal=as.numeric(stringr::str_replace_all(fact_cal,",","."))) %>%
select(mes_central) %>% slice(1)
}
library(lubridate)
base<-base %>% mutate(trimestre=make_date(year=ano_trimestre,month = mes_central))
base
## Gráfico
base %>% ggplot(aes(x=trimestre,y=tcp_mujeres))+geom_line()+geom_point()
View(base)
## Informales
base<-base %>% mutate(informales_tcp_mujeres=NA)
View(base)
## Informales desde JAS 2017 hasta SON 2020 (antes no hay variable ocup_form)
for (i in 1:nrow(base)){
base[i,6]<- dfs[[i]] %>% filter(b5==3 & (b6==1|b6==2)) %>% filter(sexo==2) %>%
filter(ocup_form==2) %>% select(fact_cal) %>%
mutate(fact_cal=as.numeric(stringr::str_replace_all(fact_cal,",","."))) %>%
sum()
}
View(base)
base<-base %>% mutate(porcentaje_informales=round(informales_tcp_mujeres/tcp_mujeres,3))
## Exportar base
writexl::write_xlsx(base,"output/graficos/tcp/tcp_mujeres_informalidad.xlsx",
col_names = TRUE,format_headers = TRUE)
library(ggrepel)
library(scales)
base %>% ggplot(aes(x=trimestre,y=porcentaje_informales))+geom_line()+geom_point()+theme_bw()+
labs(#title="Porcentaje de trabajadoras de servicio doméstico informales en Chile",
#subtitle="Sobre el total de trabajadoras de servicio doméstico ocupadas en cada trimestre",
x="Trimestres móviles",
y = "Porcentaje",
caption = "Línea roja indica entrada en vigencia de Ley 20.786.
Línea azul indica cambio de metodología. Desde ese punto cifras oficiales.
Línea morada indica inicio del COVID-19 en Chile.") +
geom_text(aes(label = ifelse(mes_central %in% c(7),
format(paste0(round(porcentaje_informales,3)*100,"%"),
scientific = FALSE),"")),
position = position_dodge(0.9),
vjust=-0.4, colour = "black", size=4.0) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
scale_x_date(labels = date_format("%Y-%m"),breaks='2 years') +
geom_vline(xintercept=as.numeric(base$trimestre[62]), linetype="dashed", color = "red", size=1) +
geom_vline(xintercept=as.numeric(base$trimestre[91]), linetype="dashed", color = "blue", size=1) +
geom_vline(xintercept=as.numeric(base$trimestre[122]), linetype="dashed", color = "purple", size=1)
ggsave(plot = last_plot(),
filename = "output/graficos/tcp/Gráfico_informales_porcentaje.png",
device = "png",
dpi = "retina",
units = "cm",
width = 30,
height = 25)
base %>% ggplot(aes(x=trimestre,y=porcentaje_informales))+geom_line()+geom_point()+theme_bw()+
labs(#title="Porcentaje de trabajadoras de servicio doméstico informales en Chile",
#subtitle="Sobre el total de trabajadoras de servicio doméstico ocupadas en cada trimestre",
x="Trimestres móviles",
y = "Porcentaje",
caption = "Marzo de 2015 entrada en vigencia de Ley 20.786.
Agosto de 2017 cambio de metodología. Desde ese punto cifras oficiales.
Marzo de 2020 inicio del COVID-19 en Chile.") +
geom_text(aes(label = ifelse(mes_central %in% c(7),
format(paste0(round(porcentaje_informales,3)*100,"%"),
scientific = FALSE),"")),
position = position_dodge(0.9),
vjust=-0.4, colour = "black", size=4.0) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
scale_x_date(labels = date_format("%Y-%m"),breaks='2 years') +
geom_vline(xintercept=as.numeric(base$trimestre[62]), linetype="dashed", color = "#bbbbbb", size=1) +
geom_vline(xintercept=as.numeric(base$trimestre[91]), linetype="dashed", color = "#bbbbbb", size=1) +
geom_vline(xintercept=as.numeric(base$trimestre[122]), linetype="dashed", color = "#bbbbbb", size=1)
View(base)
ggsave(plot = last_plot(),
filename = "output/graficos/tcp/Gráfico_informales_porcentaje_bn.png",
device = "png",
dpi = "retina",
units = "cm",
width = 30,
height = 25)
writexl::write_xlsx(base,"Ooutput/graficos/tcp/datos_grafico_informales.xlsx")
writexl::write_xlsx(base,"output/graficos/tcp/datos_grafico_informales.xlsx")
## Crear lista con las bases
dfs <- Filter(function(x) is(x, "data.frame"), mget(ls(pattern = "ene")))
base<-ls(pattern="ene") %>% as.data.frame()
names(base)<-"periodo"
base<-base %>% filter(periodo!="dfs")
base<-base %>% mutate(tcp_mujeres=NA)
## Descubrir trimestres con más o menos de 21 sectores
for (i in 1:nrow(base)){
dfs[[i]] %>%
as.data.frame() %>%
filter(categoria_ocupacion==3|categoria_ocupacion==4) %>%
filter(ocup_form==1) %>%
filter(!b14_rev4cl_caenes %in% c(20,21,999)) %>%
group_by(b14_rev4cl_caenes) %>%
summarise(asalariados=sum(fact_cal)) %>%
pivot_wider(names_from = b14_rev4cl_caenes,
values_from = asalariados) %>%
ncol() %>%
paste0(.,"_",i) %>%
print()
}
## Descubrir trimestres con más o menos de 21 sectores
for (i in 1:nrow(base)){
dfs[[i]] %>%
as.data.frame() %>%
filter(categoria_ocupacion==3|categoria_ocupacion==4) %>%
filter(ocup_form==1) %>%
filter(!b14_rev4cl_caenes %in% c(20,21,999)) %>%
group_by(b14_rev4cl_caenes) %>%
mutate(fact_cal=as.numeric(stringr::str_replace_all(fact_cal,",","."))) %>%
summarise(asalariados=sum(fact_cal)) %>%
pivot_wider(names_from = b14_rev4cl_caenes,
values_from = asalariados) %>%
ncol() %>%
paste0(.,"_",i) %>%
print()
}
n <- nrow(base)
## Crear tabla vacía
remove(base_pfijo)
## Crear tabla vacía
base<-ls(pattern = "ene_") %>% as.data.frame()
names(base)<-"periodo"
base<-base %>% filter(periodo!="dfs")
n <- nrow(base)
base <- data.frame(matrix(0, nrow = nrow(base), ncol = n,
dimnames = list(NULL, paste0("ColumnName_", 1:n))) )
base_pfijo <- base
View(base_pfijo)
## Asalariados formales plazo fijo por sector
for (i in 1:nrow(base_pfijo)){
base_pfijo[i,]<-dfs[[i]] %>%
as.data.frame() %>%
mutate(fact_cal=as.numeric(stringr::str_replace_all(fact_cal,",","."))) %>%
filter(categoria_ocupacion==3|categoria_ocupacion==4) %>%
filter(ocup_form==1) %>%
filter(!b14_rev4cl_caenes %in% c(20,21,999)) %>%
filter(b9==1) %>%
group_by(b14_rev4cl_caenes) %>%
summarise(asalariados=sum(fact_cal)) %>%
pivot_wider(names_from = b14_rev4cl_caenes,
values_from = asalariados)
}
proporcionplazofijo <- base_pfijo/base
names(proporcionplazofijo)<-c("1 Agricultura, silvicultura y pesca",
"2 Explotación de minas y canteras",
"3 Industria Manufacturera",
"4 Suministro de electricidad, gas, vapor y aire acondicionado",
"5 Suministro de agua; alcantarillado, gestión de desechos y actividades de saneamiento",
"6 Construcción",
"7 Comercio",
"8 Transporte y almacenamiento",
"9 Alojamiento y servicios de comida",
"10 Información y comunicación",
"11 Actividades financieras y de seguros",
"12 Actividades inmobiliarias",
"13 Actividades profesionales, científicas y técnicas",
"14 Actividades administrativas y servicios deapoyo",
"15 Administración pública",
"16 Enseñanza",
"17 Servicios sociales y relacionados con la salud humana",
"18 Artes, entretenimiento y recreación",
"19 Otras actividades de servicios")
## Crear lista con las bases
dfs <- Filter(function(x) is(x, "data.frame"), mget(ls(pattern = "ene")))
base<-ls(pattern="ene") %>% as.data.frame()
names(base)<-"periodo"
base<-base %>% filter(periodo!="dfs")
base<-base %>% mutate(tcp_mujeres=NA)
## Descubrir trimestres con más o menos de 21 sectores
for (i in 1:nrow(base)){
dfs[[i]] %>%
as.data.frame() %>%
filter(categoria_ocupacion==3|categoria_ocupacion==4) %>%
filter(ocup_form==1) %>%
filter(!b14_rev4cl_caenes %in% c(20,21,999)) %>%
group_by(b14_rev4cl_caenes) %>%
mutate(fact_cal=as.numeric(stringr::str_replace_all(fact_cal,",","."))) %>%
summarise(asalariados=sum(fact_cal)) %>%
pivot_wider(names_from = b14_rev4cl_caenes,
values_from = asalariados) %>%
ncol() %>%
paste0(.,"_",i) %>%
print()
}
## Crear tabla vacía
base<-ls(pattern = "ene_") %>% as.data.frame()
names(base)<-"periodo"
base<-base %>% filter(periodo!="dfs")
n <- 19
base <- data.frame(matrix(0, nrow = nrow(base), ncol = n,
dimnames = list(NULL, paste0("ColumnName_", 1:n))) )
base_pfijo <- base
## Asalariados formales por sector
for (i in 1:nrow(base)){
base[i,]<-dfs[[i]] %>%
as.data.frame() %>%
filter(categoria_ocupacion==3|categoria_ocupacion==4) %>%
filter(ocup_form==1) %>%
filter(!b14_rev4cl_caenes %in% c(20,21,999)) %>%
group_by(b14_rev4cl_caenes) %>%
summarise(asalariados=sum(fact_cal)) %>%
pivot_wider(names_from = b14_rev4cl_caenes,
values_from = asalariados)
}
## Asalariados formales plazo fijo por sector
for (i in 1:nrow(base_pfijo)){
base_pfijo[i,]<-dfs[[i]] %>%
as.data.frame() %>%
mutate(fact_cal=as.numeric(stringr::str_replace_all(fact_cal,",","."))) %>%
filter(categoria_ocupacion==3|categoria_ocupacion==4) %>%
filter(ocup_form==1) %>%
filter(!b14_rev4cl_caenes %in% c(20,21,999)) %>%
filter(b9==1) %>%
group_by(b14_rev4cl_caenes) %>%
summarise(asalariados=sum(fact_cal)) %>%
pivot_wider(names_from = b14_rev4cl_caenes,
values_from = asalariados)
}
proporcionplazofijo <- base_pfijo/base
names(proporcionplazofijo)<-c("1 Agricultura, silvicultura y pesca",
"2 Explotación de minas y canteras",
"3 Industria Manufacturera",
"4 Suministro de electricidad, gas, vapor y aire acondicionado",
"5 Suministro de agua; alcantarillado, gestión de desechos y actividades de saneamiento",
"6 Construcción",
"7 Comercio",
"8 Transporte y almacenamiento",
"9 Alojamiento y servicios de comida",
"10 Información y comunicación",
"11 Actividades financieras y de seguros",
"12 Actividades inmobiliarias",
"13 Actividades profesionales, científicas y técnicas",
"14 Actividades administrativas y servicios deapoyo",
"15 Administración pública",
"16 Enseñanza",
"17 Servicios sociales y relacionados con la salud humana",
"18 Artes, entretenimiento y recreación",
"19 Otras actividades de servicios")
plot(proporcionplazofijo$`1 Agricultura, silvicultura y pesca`,type = "l")
View(base_pfijo)
View(proporcionplazofijo)
View(base_pfijo)
View(base)
## Crear lista con las bases
dfs <- Filter(function(x) is(x, "data.frame"), mget(ls(pattern = "ene")))
base<-ls(pattern="ene") %>% as.data.frame()
names(base)<-"periodo"
base<-base %>% filter(periodo!="dfs")
base<-base %>% mutate(tcp_mujeres=NA)
## Descubrir trimestres con más o menos de 21 sectores
for (i in 1:nrow(base)){
dfs[[i]] %>%
as.data.frame() %>%
filter(categoria_ocupacion==3|categoria_ocupacion==4) %>%
filter(ocup_form==1) %>%
filter(!b14_rev4cl_caenes %in% c(20,21,999)) %>%
group_by(b14_rev4cl_caenes) %>%
mutate(fact_cal=as.numeric(stringr::str_replace_all(fact_cal,",","."))) %>%
summarise(asalariados=sum(fact_cal)) %>%
pivot_wider(names_from = b14_rev4cl_caenes,
values_from = asalariados) %>%
ncol() %>%
paste0(.,"_",i) %>%
print()
}
View(base)
## Crear tabla vacía
base<-ls(pattern = "ene_") %>% as.data.frame()
names(base)<-"periodo"
base<-base %>% filter(periodo!="dfs")
n <- 19
base <- data.frame(matrix(0, nrow = nrow(base), ncol = n,
dimnames = list(NULL, paste0("ColumnName_", 1:n))) )
base_pfijo <- base
View(base_pfijo)
View(base)
## Asalariados formales por sector
for (i in 1:nrow(base)){
base[i,]<-dfs[[i]] %>%
as.data.frame() %>%
mutate(fact_cal=as.numeric(stringr::str_replace_all(fact_cal,",","."))) %>%
filter(categoria_ocupacion==3|categoria_ocupacion==4) %>%
filter(ocup_form==1) %>%
filter(!b14_rev4cl_caenes %in% c(20,21,999)) %>%
group_by(b14_rev4cl_caenes) %>%
summarise(asalariados=sum(fact_cal)) %>%
pivot_wider(names_from = b14_rev4cl_caenes,
values_from = asalariados)
}
## Asalariados formales plazo fijo por sector
for (i in 1:nrow(base_pfijo)){
base_pfijo[i,]<-dfs[[i]] %>%
as.data.frame() %>%
mutate(fact_cal=as.numeric(stringr::str_replace_all(fact_cal,",","."))) %>%
filter(categoria_ocupacion==3|categoria_ocupacion==4) %>%
filter(ocup_form==1) %>%
filter(!b14_rev4cl_caenes %in% c(20,21,999)) %>%
filter(b9==1) %>%
group_by(b14_rev4cl_caenes) %>%
summarise(asalariados=sum(fact_cal)) %>%
pivot_wider(names_from = b14_rev4cl_caenes,
values_from = asalariados)
}
proporcionplazofijo <- base_pfijo/base
View(proporcionplazofijo)
names(proporcionplazofijo)<-c("1 Agricultura, silvicultura y pesca",
"2 Explotación de minas y canteras",
"3 Industria Manufacturera",
"4 Suministro de electricidad, gas, vapor y aire acondicionado",
"5 Suministro de agua; alcantarillado, gestión de desechos y actividades de saneamiento",
"6 Construcción",
"7 Comercio",
"8 Transporte y almacenamiento",
"9 Alojamiento y servicios de comida",
"10 Información y comunicación",
"11 Actividades financieras y de seguros",
"12 Actividades inmobiliarias",
"13 Actividades profesionales, científicas y técnicas",
"14 Actividades administrativas y servicios deapoyo",
"15 Administración pública",
"16 Enseñanza",
"17 Servicios sociales y relacionados con la salud humana",
"18 Artes, entretenimiento y recreación",
"19 Otras actividades de servicios")
plot(proporcionplazofijo$`1 Agricultura, silvicultura y pesca`,type = "l")
plot(proporcionplazofijo$`2 Explotación de minas y canteras`,type = "l")
plot(proporcionplazofijo$`3 Industria Manufacturera`,type = "l")
writexl::write_xlsx(proporcionplazofijo,"output/graficos/fijo/proporcion asalariados formales plazo fijo por sector.xlsx")
